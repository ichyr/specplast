Create droplet of your liking (ubuntu 12.10 x32)

ssh to root in terminal with your server ip

		ssh root@123.123.123.123

Add ssh fingerprint and enter password provided Change password

		passwd

Create new user

		adduser username

Set new users privileges

		visudo

Find user privileges section

		# User privilege specification
		root  ALL=(ALL:ALL) ALL

Add your new user privileges under root & cntrl+x then y to save

		username ALL=(ALL:ALL) ALL

Configure SSH

		nano /etc/ssh/sshd_config

Find and change port to one that isn't default(22 is default: choose between 1025..65536)

		Port 22 # change this to whatever port you wish to use
		Protocol 2
		PermitRootLogin no

Add to bottom of sshd_config file after changing port (cntrl+x then y to save)

		UseDNS no
		AllowUsers username

Reload ssh

		reload ssh

Don't close root! Open new shell and ssh to vps with new username(remember the port, or you're locked out!)

		ssh -p 1026 username@123.123.123.123

Update packages on virtual server

		sudo apt-get update
		sudo apt-get install curl

Install ruby dependencies

		sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties
		
Install rbenv

		git clone git://github.com/sstephenson/rbenv.git .rbenv
		echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
		echo 'eval "$(rbenv init -)"' >> ~/.bashrc

		git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
		echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc

		git clone https://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash

		git clone https://github.com/ianheggie/rbenv-binstubs.git ~/.rbenv/plugins/rbenv-binstubs

Install ruby 

		rbenv install 2.1.2
		rbenv rehash
		rbenv global 2.1.2

install rails gem

		gem install rails --no-ri --no-rdoc

Install postgres

		sudo apt-get --purge remove postgresql\*

		sudo locale-gen en_US en_US.UTF-8
		sudo dpkg-reconfigure locales 

		# sudo apt-get install postgresql-9.3 libpq-dev postgresql-contrib-9.3
		# sudo apt-get install postgresql-9.3 libpq-dev postgresql-contrib-9.3

		sudo apt-get install libpq-dev
		sudo apt-get install postgresql postgresql-contrib

		Error: The locale requested by the environment is invalid.
			echo 'LANGUAGE="en_US.UTF-8"' >> /etc/default/locale
			echo 'LC_ALL="en_US.UTF-8"' >> /etc/default/locale

			export LANGUAGE="en_US.UTF-8"

			Nothing suggested above worked in my case (Ubuntu Server 12.04LTS). What finally helped was putting to the file /etc/environment:

			LC_ALL=en_US.UTF-8
			LANG=en_US.UTF-8

		install: cannot create directory ‘/etc/postgresql’: Permission denied
		Error: could not create configuration directory; you might need to run this program with root privileges

		sudo pg_createcluster 9.3 main --start

		gem install pg -- --with-pg-config=/usr/bin/pg_config

		sudo -u postgres psql
		create user specplast with password 'PASSWORD';
		alter role specplast superuser createrole createdb replication;
		create database specplast_production owner specplast;
		Ctrl+Z

Install bundler gem

		gem install bundler

Setup Nginx

		sudo apt-get install nginx
		nginx -h
		cat /etc/init.d/nginx
		/etc/init.d/nginx -h
		sudo service nginx start
		cd /etc/nginx

[LOCAL MACHINE] local unicorn setup

		Add unicorn to the gemfile
		create unicorn.rb & unicorn_init.sh file
		chmod +x config/unicorn_init.sh

CREATE nginx.conf 

(change projectname and username to match your directory structure!) (also be aware of client_max_body_size setting, please look at nginx documentation for more information!)

		upstream unicorn {
		  server unix:/tmp/unicorn.projectname.sock fail_timeout=0;
		}

		server {
		  listen 80 default_server deferred;
		  # server_name example.com;
		  root /home/username/apps/projectname/current/public;

		  location ^~ /assets/ {
		    gzip_static on;
		    expires max;
		    add_header Cache-Control public;
		  }

		  try_files $uri/index.html $uri @unicorn;
		  location @unicorn {
		    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		    proxy_set_header Host $http_host;
		    proxy_redirect off;
		    proxy_pass http://unicorn;
		  }

		  error_page 500 502 503 504 /500.html;
		  client_max_body_size 20M;
		  keepalive_timeout 10;
		}

config/unicorn.rb

		root = "/home/username/apps/projectname/current"
		working_directory root
		pid "#{root}/tmp/pids/unicorn.pid"
		stderr_path "#{root}/log/unicorn.log"
		stdout_path "#{root}/log/unicorn.log"

		listen "/tmp/unicorn.projectname.sock"
		worker_processes 2
		timeout 30

		# Force the bundler gemfile environment variable to
		# reference the capistrano "current" symlink
		before_exec do |_|
		  ENV["BUNDLE_GEMFILE"] = File.join(root, 'Gemfile')
		end


config/unicorn_init.sh

		#!/bin/sh
		### BEGIN INIT INFO
		# Provides:          unicorn
		# Required-Start:    $remote_fs $syslog
		# Required-Stop:     $remote_fs $syslog
		# Default-Start:     2 3 4 5
		# Default-Stop:      0 1 6
		# Short-Description: Manage unicorn server
		# Description:       Start, stop, restart unicorn server for a specific application.
		### END INIT INFO
		set -e

		# Feel free to change any of the following variables for your app:
		TIMEOUT=${TIMEOUT-60}
		APP_ROOT=/home/username/apps/projectname/current
		PID=$APP_ROOT/tmp/pids/unicorn.pid
		CMD="cd $APP_ROOT; bundle exec unicorn -D -c $APP_ROOT/config/unicorn.rb -E production"
		AS_USER=username
		set -u

		OLD_PIN="$PID.oldbin"

		sig () {
		  test -s "$PID" && kill -$1 `cat $PID`
		}

		oldsig () {
		  test -s $OLD_PIN && kill -$1 `cat $OLD_PIN`
		}

		run () {
		  if [ "$(id -un)" = "$AS_USER" ]; then
		    eval $1
		  else
		    su -c "$1" - $AS_USER
		  fi
		}

		case "$1" in
		start)
		  sig 0 && echo >&2 "Already running" && exit 0
		  run "$CMD"
		  ;;
		stop)
		  sig QUIT && exit 0
		  echo >&2 "Not running"
		  ;;
		force-stop)
		  sig TERM && exit 0
		  echo >&2 "Not running"
		  ;;
		restart|reload)
		  sig HUP && echo reloaded OK && exit 0
		  echo >&2 "Couldn't reload, starting '$CMD' instead"
		  run "$CMD"
		  ;;
		upgrade)
		  if sig USR2 && sleep 2 && sig 0 && oldsig QUIT
		  then
		    n=$TIMEOUT
		    while test -s $OLD_PIN && test $n -ge 0
		    do
		      printf '.' && sleep 1 && n=$(( $n - 1 ))
		    done
		    echo

		    if test $n -lt 0 && test -s $OLD_PIN
		    then
		      echo >&2 "$OLD_PIN still exists after $TIMEOUT seconds"
		      exit 1
		    fi
		    exit 0
		  fi
		  echo >&2 "Couldn't upgrade, starting '$CMD' instead"
		  run "$CMD"
		  ;;
		reopen-logs)
		  sig USR1
		  ;;
		*)
		  echo >&2 "Usage: $0 <start|stop|restart|upgrade|force-stop|reopen-logs>"
		  exit 1
		  ;;
		esac

!!! ==== < == > ==== >>> 
!!!
!!! ALL username and projectname in 3 previous files must meet ACTUAL DATA
!!!
!!! ==== < == > ==== >>>

Add capistrano and rvm capistrano to gemfile

		gem 'capistrano'
		# gem 'rvm-capistrano'
		gem 'capistrano-rbenv'

Create capfile & config/deploy.rb files

		capify .

deploy.rb

		require "bundler/capistrano"
		require "rvm/capistrano"

		server "123.123.123.123", :web, :app, :db, primary: true

		set :application, "projectname"
		set :user, "username"
		set :port, 22
		set :deploy_to, "/home/#{user}/apps/#{application}"
		set :deploy_via, :remote_cache
		set :use_sudo, false

		set :scm, "git"
		set :repository, "git@github.com:username/#{application}.git"
		set :branch, "master"


		default_run_options[:pty] = true
		ssh_options[:forward_agent] = true

		after "deploy", "deploy:cleanup" # keep only the last 5 releases

		namespace :deploy do
		  %w[start stop restart].each do |command|
		    desc "#{command} unicorn server"
		    task command, roles: :app, except: {no_release: true} do
		      run "/etc/init.d/unicorn_#{application} #{command}"
		    end
		  end

		  task :setup_config, roles: :app do
		    sudo "ln -nfs #{current_path}/config/nginx.conf /etc/nginx/sites-enabled/#{application}"
		    sudo "ln -nfs #{current_path}/config/unicorn_init.sh /etc/init.d/unicorn_#{application}"
		    run "mkdir -p #{shared_path}/config"
		    put File.read("config/database.example.yml"), "#{shared_path}/config/database.yml"
		    puts "Now edit the config files in #{shared_path}."
		  end
		  after "deploy:setup", "deploy:setup_config"

		  task :symlink_config, roles: :app do
		    run "ln -nfs #{shared_path}/config/database.yml #{release_path}/config/database.yml"
		  end
		  after "deploy:finalize_update", "deploy:symlink_config"

		  desc "Make sure local git is in sync with remote."
		  task :check_revision, roles: :web do
		    unless `git rev-parse HEAD` == `git rev-parse origin/master`
		      puts "WARNING: HEAD is not the same as origin/master"
		      puts "Run `git push` to sync changes."
		      exit
		    end
		  end
		  before "deploy", "deploy:check_revision"
		end

Capfile

		load 'deploy'
		load 'deploy/assets'
		load 'config/deploy'

Shake hands with github

	# follow the steps in this guide if receive permission denied(public key)
	# https://help.github.com/articles/error-permission-denied-publickey
	ssh github@github.com

Add ssh key to digitalocean

	cat ~/.ssh/id_rsa.pub | ssh -p 22 username@123.123.123.123 'cat >> ~/.ssh/authorized_keys'

	# Specify your port !!!

	Error	bash: /home/specplast/.ssh/authorized_keys: No such file or directory

	ON REMOTE: mkdir ~/.ssh


Create repo and push to github ( is it there? )

	# Add config/database.yml to .gitignore
	cp config/database.yml config/database.example.yml
	git init
	git add .
	git commit -m "Inital Commit"
	git remote add origin git@github.com:username/reponame
	git push origin master

Deployment

	gem install capistrano
  gem install capistrano-bundler
  gem install capistrano-rails
  gem install capistrano-rails-console
  gem install capistrano-rbenv

If the deploy_to folder doesn't exist on your target server create it using:

	sudo mkdir -p /var/www/staging.example.com

Then change the folder ownership and permissions as follows:

	sudo chown deploy:www-data /var/www/staging.example.com/


check directory structure
	ssh -p 10375 specplast@188.166.34.64 'ls -lR /var/www/specplast'

	cap deploy:setup
	# edit /home/username/apps/projectname/shared/config/database.yml on server
	cap deploy:cold

	SSHKit::Runner::ExecuteError: Exception while executing as specplast@188.166.34.64: git exit status: 128
	git stdout: Nothing written




!!! WARNING IN THE TIME OF RAILS APP EXECUTION

1. The only disadvantage of BINSTUBS (line 71) is that you have to remember to run the following command

		bundle install --binstubs .bundle/bin
